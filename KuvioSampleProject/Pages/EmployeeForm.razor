@page "/employees/{id}"
@inject KuvioSampleProject.Data.IEmployeeService EmployeeService
@inject NavigationManager Navigation

<h1>Employee</h1>

<EditForm Model="employee" OnSubmit="@SubmitForm">
    <div class="form-group">
        <label for="id">Id</label>
        <input id="id" class="form-control" value="@employee.Id" readonly />
    </div>
    <div class="form-group">
        <label for="first-name">First Name</label>
        <InputText id="first-name" class="form-control" name="first-name" @bind-Value="@employee.FirstName" required></InputText>
    </div>
    <div class="form-group">
        <label for="last-name">Last Name</label>
        <InputText id="last-name" class="form-control" name="last-name" @bind-Value="@employee.LastName" required></InputText>
    </div>

    <div class="form-group">
        <label for="country">Country</label>
        <InputSelect id="country" class="form-control" name="country" @bind-Value="@employee.Country" required>
            <option id="BRA" value="Brazil">Brazil</option>
            <option id="CAN" value="Canada">Canada</option>ew
            <option id="NZL" value="New Zealand">New Zealand</option>
            <option id="GBR" value="United Kingdom">United Kingdom</option>
            <option id="USA" value="United States of America">United States of America</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="birthday">Birthday</label>
        <InputDate id="birthday" class="form-control" name="birthday" @bind-Value="@employee.Birthday" required></InputDate>
    </div>
    @*<div class="form-group">
        <input type="hidden" id="age" name="aged" value="@CalculateAge">
    </div>*@
    <div class="form-group">
        <input type="hidden" id="date-modified" name="date-modified" value="@DateTime.Now">
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {

    [Parameter]
    public string Id { get; set; }

    private KuvioSampleProject.Models.Employee employee { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Id) & Id == "0")
        {
            employee = new Models.Employee();
        }
        else
        {
            employee = EmployeeService.GetEmployee(Guid.Parse(Id));
        }
    }

    //private int CalculateAge(DateTime dob)
    //{
    //    int age = 0;
    //    dob = employee.Birthday;
    //    age = DateTime.Now.Year – employee.Birthday.Year;
    //    //age = DateTime.Now.Subtract(dob);
    //    if (DateTime.Now.DayOfYear < dob.DayOfYear)
    //        age = age – 1;

    //    return age;
    //}

    private void SubmitForm()
    {

        if (employee.Id == Guid.Empty)
        {
            EmployeeService.AddEmployee(employee);
        }
        else
        {
            EmployeeService.UpdateEmployee(employee);
        }

        EmployeeService.UpdateEmployee(employee);
        Navigation.NavigateTo("employees");
    }
}
